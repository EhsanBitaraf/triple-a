
# Generated by CodiumAI
from triplea.service.graph.analysis.ganalysis import get_clustering_coefficient_per_node
import networkx as nx

import pytest

class TestGetClusteringCoefficientPerNode:

    # Test with a simple graph with 3 nodes and 2 edges
    def test_simple_graph(self):
        G = nx.Graph()
        G.add_nodes_from([1, 2, 3])
        G.add_edges_from([(1, 2), (2, 3)])
    
        result = get_clustering_coefficient_per_node(G)
    
        # assert result[1] == None
        assert result[2] == 0.0
        # assert result[3] == 1.0

    # Test with a complete graph with 5 nodes
    def test_complete_graph(self):
        G = nx.complete_graph(5)
    
        result = get_clustering_coefficient_per_node(G)
    
        assert result[0] == 1.0
        assert result[1] == 1.0
        assert result[2] == 1.0
        assert result[3] == 1.0
        assert result[4] == 1.0

    # Test with a star graph with 6 nodes
    def test_star_graph(self):
        G = nx.star_graph(5)
    
        result = get_clustering_coefficient_per_node(G)
    
        assert result[0] == 0.0

    # Test with an empty graph
    def test_empty_graph(self):
        G = nx.Graph()
    
        result = get_clustering_coefficient_per_node(G)
    
        assert len(result) == 0

    # Test with a graph with only one node
    def test_single_node_graph(self):
        G = nx.Graph()
        G.add_node(1)
    
        result = get_clustering_coefficient_per_node(G)
    
        assert result[1] == None

    # Test with a graph with isolated nodes
    def test_isolated_nodes_graph(self):
        G = nx.Graph()
        G.add_nodes_from([1, 2, 3, 4])
    
        result = get_clustering_coefficient_per_node(G)
    
        assert result[1] == None
        assert result[2] == None
        assert result[3] == None
        assert result[4] == None