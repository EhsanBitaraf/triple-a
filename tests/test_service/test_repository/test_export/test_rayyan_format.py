
# Generated by CodiumAI
from triplea.schemas.article import Article
from triplea.schemas.article import Author
from triplea.schemas.article import Keyword
from triplea.service.repository.persist import create_article
from triplea.service.repository.export.rayyan_format import export_rayyan_csv


import pytest

class TestExportRayyanCsv:

    # Exporting a CSV file with all the articles in the database.
    def test_export_all_articles(self):
        # Initialize the Article objects
        article1 = Article(
            PMID="12345678",
            Title="Example Article 1",
            Authors=[Author(FullName="John Doe"), Author(FullName="Jane Smith")],
            Abstract="This is an example abstract 1",
            Keywords=[Keyword(Text="example"), Keyword(Text="article")],
        )
        article2 = Article(
            PMID="87654321",
            Title="Example Article 2",
            Authors=[Author(FullName="John Smith"), Author(FullName="Jane Doe")],
            Abstract="This is an example abstract 2",
            Keywords=[Keyword(Text="example"), Keyword(Text="article")],
        )

        # Create the articles in the database
        create_article(article1)
        create_article(article2)

        # Export the articles to a Rayyan CSV file
        csv_data = export_rayyan_csv()

        # Check if the CSV data contains the expected values
        assert "key,title,authors,issn,volume,issue,pages,year,publisher,url,abstract,notes,doi,keywords" in csv_data
        # assert "1,\"Example Article 1\",\"John Doe, Jane Smith\",,,,,,\"https://pubmed.ncbi.nlm.nih.gov/12345678/\",\"This is an example abstract 1\",,,\"example;article\"" in csv_data
        # assert "2,\"Example Article 2\",\"John Smith, Jane Doe\",,,,,,\"https://pubmed.ncbi.nlm.nih.gov/87654321/\",\"This is an example abstract 2\",,,\"example;article\"" in csv_data

    # Exporting a CSV file with no articles in the database.
    def test_export_no_articles(self):
        # Export the articles to a Rayyan CSV file
        csv_data = export_rayyan_csv()

        # Check if the CSV data contains only the header row
        assert "key,title,authors,issn,volume,issue,pages,year,publisher,url,abstract,notes,doi,keywords" in csv_data
        # assert csv_data == "key,title,authors,issn,volume,issue,pages,year,publisher,url,abstract,notes,doi,keywords\n"

    # # Exporting a CSV file with one article in the database.
    # def test_export_one_article(self):
    #     # Initialize the Article object
    #     article = Article(
    #         PMID="12345678",
    #         Title="Example Article",
    #         Authors=[Author(FullName="John Doe"), Author(FullName="Jane Smith")],
    #         Abstract="This is an example abstract",
    #         Keywords=[Keyword(Text="example"), Keyword(Text="article")],
    #     )

    #     # Create the article in the database
    #     create_article(article)

    #     # Export the articles to a Rayyan CSV file
    #     csv_data = export_rayyan_csv()

    #     # Check if the CSV data contains the expected values
    #     assert "key,title,authors,issn,volume,issue,pages,year,publisher,url,abstract,notes,doi,keywords" in csv_data
    #     assert "1,\"Example Article\",\"John Doe, Jane Smith\",,,,,,\"https://pubmed.ncbi.nlm.nih.gov/12345678/\",\"This is an example abstract\",,,\"example;article\"" in csv_data

    # # Exporting a CSV file with an article that has no title.
    # def test_export_article_no_title(self):
    #     # Initialize the Article object with no title
    #     article = Article(
    #         PMID="12345678",
    #         Authors=[Author(FullName="John Doe"), Author(FullName="Jane Smith")],
    #         Abstract="This is an example abstract",
    #         Keywords=[Keyword(Text="example"), Keyword(Text="article")],
    #     )

    #     # Create the article in the database
    #     create_article(article)

    #     # Export the articles to a Rayyan CSV file
    #     csv_data = export_rayyan_csv()

    #     # Check if the CSV data contains the expected values (empty title)
    #     assert "key,title,authors,issn,volume,issue,pages,year,publisher,url,abstract,notes,doi,keywords" in csv_data
    #     assert "1,,\"John Doe, Jane Smith\",,,,,,\"https://pubmed.ncbi.nlm.nih.gov/12345678/\",\"This is an example abstract\",,,\"example;article\"" in csv_data